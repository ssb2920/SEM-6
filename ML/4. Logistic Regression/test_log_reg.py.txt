from math import exp

#Prediction function of logistic regression 
def predict(rows,coefficients):
  yhat = coefficients[0]
  for i in range(len(rows)-1):
    yhat+=coefficients[i+1]*rows[i]
  return 1.0/(1.0+exp(-yhat))

def coefficients_sgd(train,l_rate,n_epoch):
  coef = [ 0.0 for i in range(len(train[0])) ]
  for epoch in range(n_epoch):
    sum_error = 0
    for row in train:
      yhat = predict(row,coef)
      error = row[-1] - yhat
      sum_error = sum_error + error**2
      coef[0] = coef[0] + l_rate*error*(1.0 - yhat)
      for i in range(len(row) - 1):
        coef[i+1] = coef[i+1] + l_rate*error*(1.0-yhat)*row[i]
    print('\t>>epoch = %d,l_rate = %.3f,error=%.3f'%(epoch,l_rate,sum_error))
  return coef

#Naive initial test without training
#Dataset picked randomly
dataset = [[2.7810836,2.550537003,0],
	[1.465489372,2.362125076,0],
	[3.396561688,4.400293529,0],
	[1.38807019,1.850220317,0],
	[3.06407232,3.005305973,0],
	[7.627531214,2.759262235,1],
	[5.332441248,2.088626775,1],
	[6.922596716,1.77106367,1],
	[8.675418651,-0.242068655,1],
	[7.673756466,3.508563011,1]]

l_rate = 0.3
n_epoch = 100
coef = coefficients_sgd(dataset, l_rate, n_epoch)
print(coef)